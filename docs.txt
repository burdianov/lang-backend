# TODO
1. Remove user password from register & login response


# generate secure passwords:
https://passwordsgenerator.net/

##### setup google as mailing client #####
* go to https://console.cloud.google.com/
* create a new project "Lang-dev"
* select Lang-dev as current project
* click on Credentials -> Create Credentials -> OAuth client ID
* click Configure Consent Screen
* don't choose a User Type and click on Create
* type the App name
* select the user support email
* add Developer Contact Information Email Address
* click Save and Continue
* on Scopes Screen click Add Or Remove Scopes and select 3 scopes: .../auth/userinfo.email, .../auth/userinfo.profile, openid, then click Update and Save and Continue
* on Test Users Screen click Add Users and add engstrike.website@gmail.com, then Save and Continue

* click on Credentials -> Create Credentials -> OAuth client ID
* select Application type as Web Application
* add Authorized JavaScript origins
	http://localhost:3000
* add Authorized redirect URIs
	https://developers.google.com/oauthplayground
* click on Create
* copy Your Client ID and assign it to 
	MAILING_SERVICE_CLIENT_ID environment variable
* copy Your Client Secret and assign it to MAILING_SERVICE_CLIENT_SECRET environment variable
* click OK

* go to https://developers.google.com/oauthplayground/
* click on OAuth 2.0 Configuration (cog icon right top corner)
* check Use your own OAuth credentials
* fill the fields OAuth Client ID and OAuth Client secret with the info retrieved above
* click on close
* in the left bottom text field (Input your own scopes) enter
	https://mail.google.com
	and click on Authorize APIs
* from the consent screen select engstrike.website@gmail.com and grant the application full access to your Gmail
* after that you are redirected back to the playground
* click on Exchange authorization code for tokens
* copy the just created refresh token and assign it to 
	MAILING_SERVICE_REFRESH_TOKEN environment variable

##############################


##### Project 1 #####
$ nest new project_name

$ add to .prettierrc:
  "endOfLine": "auto"

$ yarn start:dev
 
# restart server
$ rs + enter

$ yarn docker:exec

# inside psql:
$ \l    : list all databases
$ create database mediumclone;
$ \du   : display users
$ create user user_name with encrypted password '123';
$ grant all privileges on database database_name to user_name;

$ \c database_name  : connect to database
$ \dt   : display tables
$ \d table_name     : display table fields
$ INSERT INTO tags (name) VALUES ('dragons');
$ SELECT * FROM tags;

# Workflow
$ yarn db:drop
$ yarn db:migrate
$ yarn db:seed


##### Project 2 #####
# add the following rules in .eslintrc.js
	'@typescript-eslint/no-empty-function': 'on',
	'@typescript-eslint/no-non-null-assertion': 1,
	'prettier/prettier': [
		'error',
		{
			endOfLine: 'auto'
		}
	]

# change trailingComma to 'none' in .prettierrc

# inside tsconfig.json, in "compilerOptions" add:
	"strict": true,
	"strictPropertyInitialization": false,
	"skipLibCheck": true,
	"noImplicitAny": false

# inside docker-compose convert indentation to spaces:
	F1 -> Convert Indentation to Spaces -> Enter

$ nest new

$ npm run start:dev

$ nest generate controller
or
$ nest g co
$ nest g co --no-spec

# use --dry-run to view only the result
$ nest g co controller_name --dry-run

$ nest generate service
or
$ nest g s

$ nest g module module_name
$ nest g mo module_name

$ nest g class coffees/dto/create-coffee.dto --no-spec

$ git checkout -b branch_name
$ git checkout master

$ docker-compose up -d

$ npx typeorm migration:create -n CoffeeRefactor
$ npx typeorm migration:run
$ npx typeorm migration:revert
$ npx typeorm migration:generate -n SchemaSync

$ nest g filter common/filters/http-exception
$ nest g guard common/guards/api-key